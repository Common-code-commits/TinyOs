[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	_binfo
	EXTERN	_io_hlt
	EXTERN	_io_load_eflags
	EXTERN	_io_cli
	EXTERN	_io_out8
	EXTERN	_io_store_eflags
	EXTERN	_hankaku
	EXTERN	_load_gdtr
	EXTERN	_load_idtr
[FILE "bootpack.c"]
[SECTION .data]
	ALIGNB	4
_binfo:
	DD	4080
LC0:
	DB	"Chinese",0x00
LC1:
	DB	"Haribote OS.",0x00
[SECTION .text]
	GLOBAL	_HariMain
_HariMain:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	MOV	EBX,2
	SUB	ESP,280
	MOV	BYTE [-284+EBP],-73
	MOV	BYTE [-283+EBP],-82
	MOV	EDX,DWORD [-284+EBP]
	MOV	WORD [ESP],DX
	MOV	BYTE [2+ESP],-113
	MOV	BYTE [-282+EBP],-113
	CALL	_init_screen
	MOV	ESI,DWORD [_binfo]
	MOVSX	EAX,WORD [4+ESI]
	LEA	ECX,DWORD [-16+EAX]
	MOV	EAX,ECX
	CDQ
	IDIV	EBX
	MOVSX	EDX,WORD [6+ESI]
	SUB	EDX,44
	MOV	EDI,EAX
	MOV	EAX,EDX
	CDQ
	IDIV	EBX
	LEA	EBX,DWORD [-268+EBP]
	MOV	ESI,EAX
	PUSH	EBX
	CALL	_init_mouse_cursor
	PUSH	EBX
	PUSH	ESI
	PUSH	EDI
	CALL	_putblock8_8
	PUSH	LC0
	PUSH	8
	PUSH	8
	CALL	_putfonts8_asc
	ADD	ESP,32
	PUSH	LC1
	PUSH	31
	PUSH	31
	CALL	_putfonts8_asc
	PUSH	LC1
	PUSH	30
	PUSH	30
	CALL	_putfonts8_asc
	ADD	ESP,24
L2:
	CALL	_io_hlt
	JMP	L2
[SECTION .data]
_table_rgb.0:
	DB	-1
	DB	-1
	DB	-1
	DB	-1
	DB	0
	DB	0
	DB	-1
	DB	-1
	DB	-1
	DB	-1
	DB	-1
	DB	-1
	DB	0
	DB	0
	DB	-1
	DB	0
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	-1
	DB	0
	DB	0
	DB	0
	DB	-58
	DB	-58
	DB	-58
	DB	-124
	DB	0
	DB	0
	DB	0
	DB	-124
	DB	0
	DB	-124
	DB	-124
	DB	0
	DB	0
	DB	0
	DB	-124
	DB	-124
	DB	0
	DB	-124
	DB	0
	DB	-124
	DB	-124
	DB	-124
	DB	-124
	DB	-124
[SECTION .text]
	GLOBAL	_init_palette
_init_palette:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	_table_rgb.0
	PUSH	15
	PUSH	0
	CALL	_set_palette
	LEAVE
	RET
	GLOBAL	_set_palette
_set_palette:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	ECX
	MOV	EBX,DWORD [8+EBP]
	MOV	EDI,DWORD [12+EBP]
	MOV	ESI,DWORD [16+EBP]
	CALL	_io_load_eflags
	MOV	DWORD [-16+EBP],EAX
	CALL	_io_cli
	PUSH	EBX
	PUSH	968
	CALL	_io_out8
	CMP	EBX,EDI
	POP	EAX
	POP	EDX
	JLE	L11
L13:
	MOV	EAX,DWORD [-16+EBP]
	MOV	DWORD [8+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_io_store_eflags
L11:
	MOV	AL,BYTE [ESI]
	INC	EBX
	SHR	AL,2
	MOVZX	EAX,AL
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	MOV	AL,BYTE [1+ESI]
	SHR	AL,2
	MOVZX	EAX,AL
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	MOV	AL,BYTE [2+ESI]
	SHR	AL,2
	ADD	ESI,3
	MOVZX	EAX,AL
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	ADD	ESP,24
	CMP	EBX,EDI
	JLE	L11
	JMP	L13
	GLOBAL	_set_fill_color
_set_fill_color:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,32
	MOV	AL,BYTE [8+EBP]
	MOV	DL,BYTE [10+EBP]
	MOV	BYTE [-32+EBP],AL
	MOV	BYTE [-30+EBP],DL
	MOV	AL,BYTE [9+EBP]
	MOV	BYTE [-14+EBP],DL
	MOV	BYTE [-31+EBP],AL
	MOV	EAX,DWORD [-32+EBP]
	MOV	WORD [-16+EBP],AX
	LEA	EAX,DWORD [-16+EBP]
	PUSH	EAX
	PUSH	0
	PUSH	0
	CALL	_set_palette
	LEAVE
	RET
	GLOBAL	_set_border_color
_set_border_color:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,32
	MOV	AL,BYTE [8+EBP]
	MOV	DL,BYTE [10+EBP]
	MOV	BYTE [-32+EBP],AL
	MOV	BYTE [-30+EBP],DL
	MOV	AL,BYTE [9+EBP]
	MOV	BYTE [-14+EBP],DL
	MOV	BYTE [-31+EBP],AL
	MOV	EAX,DWORD [-32+EBP]
	MOV	WORD [-16+EBP],AX
	LEA	EAX,DWORD [-16+EBP]
	PUSH	EAX
	PUSH	1
	PUSH	1
	CALL	_set_palette
	LEAVE
	RET
	GLOBAL	_set_font_color
_set_font_color:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,32
	MOV	AL,BYTE [8+EBP]
	MOV	DL,BYTE [10+EBP]
	MOV	BYTE [-32+EBP],AL
	MOV	BYTE [-30+EBP],DL
	MOV	AL,BYTE [9+EBP]
	MOV	BYTE [-14+EBP],DL
	MOV	BYTE [-31+EBP],AL
	MOV	EAX,DWORD [-32+EBP]
	MOV	WORD [-16+EBP],AX
	LEA	EAX,DWORD [-16+EBP]
	PUSH	EAX
	PUSH	2
	PUSH	2
	CALL	_set_palette
	LEAVE
	RET
	GLOBAL	_set_screen_color
_set_screen_color:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,32
	MOV	AL,BYTE [8+EBP]
	MOV	DL,BYTE [10+EBP]
	MOV	BYTE [-32+EBP],AL
	MOV	BYTE [-30+EBP],DL
	MOV	AL,BYTE [9+EBP]
	MOV	BYTE [-14+EBP],DL
	MOV	BYTE [-31+EBP],AL
	MOV	EAX,DWORD [-32+EBP]
	MOV	WORD [-16+EBP],AX
	LEA	EAX,DWORD [-16+EBP]
	PUSH	EAX
	PUSH	4
	PUSH	4
	CALL	_set_palette
	LEAVE
	RET
	GLOBAL	_fillrectangle
_fillrectangle:
	PUSH	EBP
	MOV	EAX,DWORD [_binfo]
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	MOV	EBX,DWORD [12+EBP]
	MOVSX	EDI,WORD [4+EAX]
	CMP	EBX,DWORD [20+EBP]
	JG	L30
	MOV	ESI,EBX
	IMUL	ESI,EDI
L28:
	MOV	ECX,DWORD [8+EBP]
	CMP	ECX,DWORD [16+EBP]
	JG	L32
L27:
	LEA	EDX,DWORD [ECX+ESI*1]
	MOV	EAX,DWORD [_vram]
	INC	ECX
	MOV	BYTE [EDX+EAX*1],0
	CMP	ECX,DWORD [16+EBP]
	JLE	L27
L32:
	INC	EBX
	ADD	ESI,EDI
	CMP	EBX,DWORD [20+EBP]
	JLE	L28
L30:
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_init_screen
_init_screen:
	PUSH	EBP
	MOV	EAX,DWORD [_binfo]
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOVSX	EBX,WORD [6+EAX]
	MOVSX	ESI,WORD [4+EAX]
	MOV	EAX,DWORD [8+EAX]
	MOV	DWORD [_vram],EAX
	CALL	_init_palette
	PUSH	EAX
	MOV	EAX,DWORD [8+EBP]
	MOV	WORD [ESP],AX
	MOV	AL,BYTE [10+EBP]
	MOV	BYTE [2+ESP],AL
	CALL	_set_screen_color
	POP	EAX
	TEST	EBX,EBX
	JS	L45
L43:
	MOV	ECX,ESI
	TEST	ESI,ESI
	JS	L47
L42:
	MOV	EAX,EBX
	MOV	EDX,DWORD [_vram]
	IMUL	EAX,ESI
	ADD	EAX,ECX
	DEC	ECX
	MOV	BYTE [EAX+EDX*1],4
	JNS	L42
L47:
	DEC	EBX
	JNS	L43
L45:
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	RET
	GLOBAL	_putfont
_putfont:
	PUSH	EBP
	MOV	EAX,DWORD [_binfo]
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	MOV	EDI,DWORD [16+EBP]
	MOVSX	ESI,WORD [4+EAX]
	XOR	EBX,EBX
L61:
	MOV	EAX,DWORD [12+EBP]
	MOV	EDX,DWORD [8+EBP]
	ADD	EAX,EBX
	IMUL	EAX,ESI
	ADD	EAX,DWORD [_vram]
	LEA	ECX,DWORD [EDX+EAX*1]
	MOV	DL,BYTE [EBX+EDI*1]
	TEST	DL,DL
	JNS	L53
	MOV	BYTE [ECX],2
L53:
	MOV	AL,DL
	AND	EAX,64
	TEST	AL,AL
	JE	L54
	MOV	BYTE [1+ECX],2
L54:
	MOV	AL,DL
	AND	EAX,32
	TEST	AL,AL
	JE	L55
	MOV	BYTE [2+ECX],2
L55:
	MOV	AL,DL
	AND	EAX,16
	TEST	AL,AL
	JE	L56
	MOV	BYTE [3+ECX],2
L56:
	MOV	AL,DL
	AND	EAX,8
	TEST	AL,AL
	JE	L57
	MOV	BYTE [4+ECX],2
L57:
	MOV	AL,DL
	AND	EAX,4
	TEST	AL,AL
	JE	L58
	MOV	BYTE [5+ECX],2
L58:
	MOV	AL,DL
	AND	EAX,2
	TEST	AL,AL
	JE	L59
	MOV	BYTE [6+ECX],2
L59:
	AND	EDX,1
	TEST	DL,DL
	JE	L51
	MOV	BYTE [7+ECX],2
L51:
	INC	EBX
	CMP	EBX,15
	JLE	L61
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_putfonts8_asc
_putfonts8_asc:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	MOV	EDI,DWORD [12+EBP]
	MOV	EBX,DWORD [16+EBP]
	MOV	ESI,DWORD [8+EBP]
	CMP	BYTE [EBX],0
	JNE	L69
L71:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L69:
	MOVZX	EAX,BYTE [EBX]
	SAL	EAX,4
	INC	EBX
	ADD	EAX,_hankaku
	PUSH	EAX
	PUSH	EDI
	PUSH	ESI
	ADD	ESI,8
	CALL	_putfont
	ADD	ESP,12
	CMP	BYTE [EBX],0
	JNE	L69
	JMP	L71
[SECTION .data]
_cursor.1:
	DB	"**************.."
	DB	"*OOOOOOOOOOO*..."
	DB	"*OOOOOOOOOO*...."
	DB	"*OOOOOOOOO*....."
	DB	"*OOOOOOOO*......"
	DB	"*OOOOOOO*......."
	DB	"*OOOOOOO*......."
	DB	"*OOOOOOOO*......"
	DB	"*OOOO**OOO*....."
	DB	"*OOO*..*OOO*...."
	DB	"*OO*....*OOO*..."
	DB	"*O*......*OOO*.."
	DB	"**........*OOO*."
	DB	"*..........*OOO*"
	DB	"............*OO*"
	DB	".............***"
[SECTION .text]
	GLOBAL	_init_mouse_cursor
_init_mouse_cursor:
	PUSH	EBP
	XOR	ECX,ECX
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	XOR	ESI,ESI
	MOV	EBX,DWORD [8+EBP]
L85:
	XOR	EDX,EDX
L84:
	LEA	EAX,DWORD [EDX+ECX*1]
	CMP	BYTE [_cursor.1+EAX],42
	JE	L90
L81:
	CMP	BYTE [_cursor.1+EAX],79
	JE	L91
L82:
	CMP	BYTE [_cursor.1+EAX],46
	JE	L92
L79:
	INC	EDX
	CMP	EDX,15
	JLE	L84
	INC	ESI
	ADD	ECX,16
	CMP	ESI,15
	JLE	L85
	POP	EBX
	POP	ESI
	POP	EBP
	RET
L92:
	MOV	BYTE [EAX+EBX*1],4
	JMP	L79
L91:
	MOV	BYTE [EAX+EBX*1],3
	JMP	L82
L90:
	MOV	BYTE [EAX+EBX*1],5
	JMP	L81
	GLOBAL	_putblock8_8
_putblock8_8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	XOR	EDI,EDI
	PUSH	EBX
	PUSH	ECX
	PUSH	ECX
	MOV	EAX,DWORD [_binfo]
	MOV	DWORD [-20+EBP],0
	MOVSX	EAX,WORD [4+EAX]
	MOV	DWORD [-16+EBP],EAX
L103:
	MOV	EBX,DWORD [-20+EBP]
	XOR	ESI,ESI
	ADD	EBX,DWORD [16+EBP]
L102:
	MOV	EDX,DWORD [12+EBP]
	MOV	EAX,DWORD [8+EBP]
	ADD	EDX,EDI
	ADD	EAX,ESI
	IMUL	EDX,DWORD [-16+EBP]
	ADD	EDX,EAX
	MOV	CL,BYTE [EBX]
	MOV	EAX,DWORD [_vram]
	INC	ESI
	INC	EBX
	CMP	ESI,16
	MOV	BYTE [EDX+EAX*1],CL
	JL	L102
	INC	EDI
	ADD	DWORD [-20+EBP],16
	CMP	EDI,16
	JL	L103
	POP	EAX
	POP	EDX
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_init_gdtidt
_init_gdtidt:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	ESI,2555904
	MOV	EBX,8191
L113:
	PUSH	0
	PUSH	0
	PUSH	0
	PUSH	ESI
	ADD	ESI,8
	CALL	_set_segmdesc
	ADD	ESP,16
	DEC	EBX
	JNS	L113
	PUSH	16530
	PUSH	0
	PUSH	-1
	PUSH	2555912
	CALL	_set_segmdesc
	PUSH	16538
	PUSH	2621440
	PUSH	524287
	PUSH	2555920
	CALL	_set_segmdesc
	ADD	ESP,32
	PUSH	2555904
	PUSH	65535
	CALL	_load_gdtr
	POP	EBX
	POP	ESI
	MOV	EBX,255
	MOV	ESI,2553856
L118:
	PUSH	0
	PUSH	0
	PUSH	0
	PUSH	ESI
	ADD	ESI,8
	CALL	_set_gatedesc
	ADD	ESP,16
	DEC	EBX
	JNS	L118
	PUSH	2553856
	PUSH	2047
	CALL	_load_idtr
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	RET
	GLOBAL	_set_segmdesc
_set_segmdesc:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EDX,DWORD [12+EBP]
	MOV	ECX,DWORD [16+EBP]
	MOV	EBX,DWORD [8+EBP]
	MOV	EAX,DWORD [20+EBP]
	CMP	EDX,1048575
	JBE	L124
	SHR	EDX,12
	OR	EAX,32768
L124:
	MOV	WORD [EBX],DX
	MOV	BYTE [5+EBX],AL
	SHR	EDX,16
	SAR	EAX,8
	AND	EDX,15
	MOV	WORD [2+EBX],CX
	AND	EAX,-16
	SAR	ECX,16
	OR	EDX,EAX
	MOV	BYTE [4+EBX],CL
	MOV	BYTE [6+EBX],DL
	SAR	ECX,8
	MOV	BYTE [7+EBX],CL
	POP	EBX
	POP	EBP
	RET
	GLOBAL	_set_gatedesc
_set_gatedesc:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EDX,DWORD [8+EBP]
	MOV	EAX,DWORD [16+EBP]
	MOV	EBX,DWORD [20+EBP]
	MOV	ECX,DWORD [12+EBP]
	MOV	WORD [2+EDX],AX
	MOV	BYTE [5+EDX],BL
	MOV	WORD [EDX],CX
	MOV	EAX,EBX
	SAR	EAX,8
	SAR	ECX,16
	MOV	BYTE [4+EDX],AL
	MOV	WORD [6+EDX],CX
	POP	EBX
	POP	EBP
	RET
[SECTION .data]
	ALIGNB	4
_vram:
	RESB	4
